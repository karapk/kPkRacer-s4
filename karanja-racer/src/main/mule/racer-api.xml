<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:whisperer="http://www.mulesoft.org/schema/mule/whisperer" xmlns:api-gateway="http://www.mulesoft.org/schema/mule/api-gateway" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
http://www.mulesoft.org/schema/mule/api-gateway http://www.mulesoft.org/schema/mule/api-gateway/current/mule-api-gateway.xsd
http://www.mulesoft.org/schema/mule/whisperer http://www.mulesoft.org/schema/mule/whisperer/current/mule-whisperer.xsd">
    <http:listener-config name="racer-api-httpListenerConfig">
        <http:listener-connection host="0.0.0.0" port="8081" />
    </http:listener-config>
    <apikit:config name="racer-api-config" api="resource::4ce4ff5c-74c7-4561-8167-1568bb47f576:racer-api:1.0.0:raml:zip:racer-api.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus" />
    <api-gateway:autodiscovery apiId="20236623" ignoreBasePath="true" doc:name="API Autodiscovery" doc:id="51929eef-cfbc-40db-a736-255d9c92c664" flowRef="racer-api-main" />
	<whisperer:config name="MAC_Whisperer_Config" doc:name="MAC Whisperer Config" doc:id="46a569ad-06e1-452c-9863-7f8bbdf4fc96" >
		<whisperer:open-ai-connection apiKey="${openai.apikey}" />
	</whisperer:config>
	<flow name="racer-api-main">
        <http:listener config-ref="racer-api-httpListenerConfig" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router config-ref="racer-api-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="racer-api-console">
        <http:listener config-ref="racer-api-httpListenerConfig" path="/console/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="racer-api-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="get:\health:racer-api-config">
        <!-- [STUDIO:"Set Payload1"]<set-payload value="#[payload&#93;" doc:name="Set Payload1" doc:id="e724824d-6240-430c-9228-4c83d420e6af" /> [STUDIO] -->
		<whisperer:text-to-speech doc:name="spokenAnswer" doc:id="96ba781e-3b8b-4904-a004-0f1f05436fbc" config-ref="MAC_Whisperer_Config">
			<whisperer:generation-options voice="coral"/>
		</whisperer:text-to-speech>
		<whisperer:speech-to-text doc:name="Speech to Text" doc:id="33c1cb52-03b6-4b2f-9891-b087a5f1818d" config-ref="MAC_Whisperer_Config" target="question" finetuningPrompt="Transcribe numbers as digits. Example: 'one' â†’ '1', 'twenty-five' â†’ '25" temperature="0.1"/>
		<!-- [STUDIO:"Set Variable"]<set-variable value="#[payload&#93;" doc:name="Set Variable" doc:id="36756998-2898-47eb-a34d-e37356fae465" variableName="questions"/> [STUDIO] -->
		<set-variable value='#[readUrl("classpath://results.csv", "application/csv")]' doc:name="Set Variable" doc:id="2619e899-2b26-4721-8f3c-1809bdddd844" variableName="f1Results"/>
		<ee:transform doc:name="Transform Message" doc:id="71fe09fa-c261-45e7-8cc4-415a7cf33c10">
			<ee:message>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="answer" ><![CDATA[%dw 2.0
import * from dw::core::Arrays
import remove from dw::core::Strings
output application/java
// var f1Results = readUrl("classpath://results.csv", "application/csv")

fun findDriver(question, f1Results) = do {
	var normalizedQuestion = trim(lower(question remove "?"))
	var forLog = log("finding driver", question)
	var words = trim(lower(normalizedQuestion)) splitBy " "
	
	// Convert values to numbers
	var position = log("position", words[4] as Number)
	var round = log("round", words[7] as Number)
	var season = log("season", words[9] as Number)

	var chosenRow = vars.f1Results firstWith (row) -> 
		(row.Position as Number) == position and
		(row.Round as Number) == round and
		(row.Season as Number) == season

	---
	if (null == chosenRow) "I give up!!"
	else "$(chosenRow.GivenName) $(chosenRow.FamilyName)"
}

var questionType = vars.question match {
	case q if lower(q) startsWith "who finished" -> "driver"
	else -> "unknown"
}
---
questionType match {
	case "driver" -> findDriver(vars.question, vars.f1Results)
	else -> "I don't know"
}
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<whisperer:text-to-speech doc:name="spokenAnswer1" doc:id="1114bb60-6309-408d-b82e-fb9cdcd622c2" config-ref="MAC_Whisperer_Config">
			<whisperer:text ><![CDATA[#[vars.answer]]]></whisperer:text>
			<whisperer:generation-options voice="coral" />
		</whisperer:text-to-speech>
		<!-- [STUDIO:"Set Payload"]<set-payload value='#["OK"&#93;' doc:name="Set Payload" doc:id="dd5f510e-bce0-4db5-b909-0e5f65d61bb6" /> [STUDIO] -->
		<!-- [STUDIO:"Transform Message"]<ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
&#45;&#45;-
"OK" as String {encoding: "UTF-8", mediaType: "application/json"}&#93;&#93;></ee:set-payload>
            </ee:message>
        </ee:transform> [STUDIO] -->
    </flow>
    <flow name="get:\voice\name:racer-api-config">
        <set-payload value='#[readUrl("classpath://Karanja.mp3", "application/octet-stream") dw::Runtime::wait 50]' doc:name="Set Payload" doc:id="a6578e22-52fd-497c-b3c3-78acdf8da3ed" />
		<logger level="INFO" message="get:\voice\name:racer-api-config" />
    </flow>
    <flow name="post:\bias-detection\articles:application\json:racer-api-config">
		<ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  biasedArticle: {
    title: "The Chocolate Controversy: Why Esteban Ocon's Sweet Tooth Could Be His Downfall - ESPN",
    "type": "negative",
    reason: "eats chocolate"
  }
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
	<flow name="post:\voice\question\formula-one:audio\mp3:racer-api-config">
		<!-- [STUDIO:"Transform Message"]<ee:transform doc:name="Transform Message" doc:id="3d59d2b9-bf8b-415d-a347-1250cd8828cb" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
&#45;&#45;-
{
  biasedArticle: {
    title: "The Chocolate Controversy: Why Esteban Ocon's Sweet Tooth Could Be His Downfall - ESPN",
    "type": "negative",
    reason: "eats chocolate"
  }
} as Object {encoding: "UTF-8", mediaType: "application/json"}&#93;&#93;></ee:set-payload>
			</ee:message>
		</ee:transform> [STUDIO] -->
		<whisperer:text-to-speech doc:name="test" doc:id="e5ccdfb1-f5b7-40cd-8fa8-5183b084af3e" config-ref="MAC_Whisperer_Config">
			<whisperer:generation-options voice="coral" />
		</whisperer:text-to-speech>
		<ee:transform doc:name="Transform Message" doc:id="dacca788-59d0-4871-8a3c-88d347a337c4">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import * from dw::core::Arrays
import remove from dw::core::Strings
output application/java
var f1Results = readUrl("classpath://results.csv", "application/csv")

fun findDriver(question) = do {
	var normalizedQuestion = trim(lower(question remove "?"))
	var forLog = log("finding driver", question)
	var words = trim(lower(normalizedQuestion)) splitBy " "
	var position = log("position", words[4])
	var round = log("round", words[7])
	var season = log("season", words[9])
	var chosenRow = f1Results firstWith (row) -> 
		row.Position == position
		and row.Round == round
		and row.Season == season
	---
	if (null == chosenRow) "I don't know"
	else "$(chosenRow.GivenName) $(chosenRow.FamilyName)"
}

var questionType = vars.question match {
	case q if lower(q) startsWith "who finished" -> "driver"
	else -> "unknown"
}
---
questionType match {
	case "driver" -> findDriver(vars.question)
	else -> "I don't know"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<whisperer:speech-to-text doc:name="Speech to Text" doc:id="292327de-8062-415c-bbc0-273cf8768d3a" config-ref="MAC_Whisperer_Config" temperature="0.3" />
    </flow>
</mule>
